//Debug assist functions.
{
	//We can't actually use these as class types is not a "thing". Just for reference.
	types: {
		//_serialize_data expands an arbitrary data structure into a tree, to make
		//it easier to process. This results in object leafs, branches, and nodes.
		ObjectLeaf: "{depth:int, key:any, repr:string, type:string}",
		ObjectBranch: "{depth:int, key:any, items:[ObjectNode], type:string}",
		ObjectNode: "ObjectLeaf|ObjectBranch",
		
		//_serialize takes an ObjectNode and returns SerializedData, which wraps
		//some metadata and includes the prettily-formatted output as text.
		SerializedData: "{text:string, newlines:int, chars:int}",
	},
	
	assumed_console_width: 50, //chars
	indent_amount: 4, //spaces
	
	//short name for pretty_print, easier to type when debugging
	pp: "def(any val) -> commands
		debug(pretty_string(val))",
	
	//Pretty-print function, useful on the console to dig into data structures containing objects.
	pretty_print: "def(any val) -> commands
		debug(pretty_string(val))",
	
	//Prettily format a data structure for human consumption. Used for debugging by pretty_print/pp and by the engine for the debug console via the --console-prettyprint option.
	pretty_string: "def(any val) -> string
		if(output.newlines or output.chars > 500, 
			'\n\n==================\nOUTPUT BLOCK\n==================\n\n' + output.text + '\n', //Can't use string interpolation with the where-clause here.
			output.text
		) where output = _serialize((
			{depth:int, key:any, repr:string, type:string}|{depth:int, key:any, items:[any], type:string} <- _serialize_data(val, [99999,10,5,3,0])
		))",
	
	//Expand an arbitrary data structure into another one convenient for
	//serialization, to try to make that job as easy as possible.
	_serialize_data: "
		def(any val, [int] truncate_collections_at, int depth=0, map seen={}) -> {string->any} 
			//Actual type is ObjectNode. Does not work for three reasons: 1) We can't
			//define types in classes, and even if we could 2) we cannot define
			//recursive types, which we need to type this recursive function. In
			//addition, if we write it out long-form, 3) map types get merged on
			//recursive call which then fails as they're exclusive: {depth:int,
			//key:any, repr:string, type:string}|{depth:int, key:any, items:[any],
			//type:string}. Anyway,
			
			{ depth:depth, key:null }
			+ switch(true,
				
				seen[val], //leaf node, aborted due to recursion
				{
					repr: '(see previous ' + typeof(val) + ')', //Use the type of the object as the value as a placeholder, since we've already printed it once and don't want to recurse what are effectively doubly-linked lists. (ie, level.player.level.player...)
					type: 'any',
				},
				
				not truncate_collections_at, //leaf node, aborted due to max depth reached
				{
					repr: '(truncated, max depth reached)',
					type: 'null',
				},
				
				val is list, //branch node
				{
					items: map(val[:truncate_collections_at[0]], 
						_serialize_data(value, truncate_collections_at[1:], depth+1, seen+{(val):true})
						//+ { key:_serialize_data(index, truncate_collections_at[1:], depth+1, seen+{(val):true}) }
					) + if(truncated, [
						{ depth:depth+1, key:null, repr: '(plus ' + str(truncated) + ' more items)', type: 'null' }
					], []) where truncated = size(val[truncate_collections_at[0]:]),
					type: 'list',
				},
				
				val is custom_obj or val is map or val is level, //branch node
				{
					items: map(keys[:truncate_collections_at[0]], 'key',
						_serialize_data(val[key], truncate_collections_at[1:], depth+1, seen+{(val):true})
						+ { key:_serialize_data(key, truncate_collections_at[1:], depth+1, seen+{(val):true}) }
					) + if(truncated, [
						{ depth:depth+1, key:null, repr: '(plus ' + str(truncated) + ' more items)', type: 'null' }
					], []) where truncated = size(keys[truncate_collections_at[0]:])
					where 
						keys = switch(true,
							val is level, //keys() doesn't work on level, just returns []. We'll special-case this and list the values from <https://github.com/frogatto/frogatto/wiki/level>. Exclude 'suspended_level', since it throws an error if it is null which is usually.
							['id', 'active_chars', 'camera_position', 'chars', 'chars_immune_from_freeze', 'cycle', 'debug_properties', 'dimensions', 'editor_selection', 'focus', 'gui', 'id', 'in_dialog', 'in_editor', 'is_paused', 'local_player', 'lock_screen', 'num_active', 'num_segments', 'player', 'segment_height', 'segment_width', 'time_freeze', 'zoom'],
								
							'type' in keys and 'animation' in keys and 'xy' in keys, 
							['type', 'animation', 'xy'] + keys, //Display the interesting stuff first. Display it again inline because if you're looking for it alphabetically it should show up there too.
							
							keys
						) where keys = sort(keys(custom_obj|map|level<-val)),
					type: 'map',
				},
				
				//default leaf node, just has the value nice and easy
				{
					repr: 
						if(val is string,
							q(') + val + q('),
							str(val),
						),
					type: typeof(val),
				},
			)",
	
	//Produce a human-readable summary of a data structure. Generally speaking,
	//this means it will display the entire current object, but it will truncate
	//sub-objects if they're too long. Displaying objects referencing objects can
	//get *quite* lengthy. The intended use is to winnow down the sub-object to
	//investigate in detail here, similiar to clicking the expand button for a
	//data structure in the excellent Chromium dev tools.
	_serialize: "overload(
		//There are a few considerations to take into account here.
	
		//Serialize lists of values. Lists of values are produced by any
		//container type; levels, custom_objs, maps, and of course lists.
		def({depth:int, key:any, items:[any], type:string} branch, bool force_single_line=false) -> {text:string, newlines:int, chars:int} ( //def(ObjectBranch branch, …) -> SerializedData
			switch(true,
				
				inlineable or 
				force_single_line,
				({
					text: 
						if(key_value, key_value.text + ': ', '')
						+ if(brackets, 
							brackets[0] + if(sub_values_are_trivial, '', ''), 
							''
						) 
						+ single_line_text 
						+ if(brackets, 
							if(sub_values_are_trivial, '', '') + brackets[1], 
							''
						),
					newlines: 0,
					chars: total_sub_value_length,
				} where 
					single_line_text = fold(map(sub_values, value.text), 
						a + if(sub_values_are_trivial, ', ', ', ') + b)
				),
				
				//multiline,
				({
					text: 
						if(key_value, key_value.text + ': ', '')
						+ if(brackets,
							brackets[0] 
							+ '\n' + indent_str_inner
							+ multi_line_text 
							+ '\n' + indent_str_outer 
							+ brackets[1],
							multi_line_text
						),
					newlines: fold(map(sub_values, value.newlines), a+b),
					chars: total_sub_value_length,
				} where 
					multi_line_text = fold(map(sub_values, value.text), 
						a + ',\n' + indent_str_inner + b)
				where
					indent_str_outer = fold([' '] * (indent_amount*(branch.depth)), a+b),
					indent_str_inner = fold([' '] * (indent_amount*(branch.depth+1)), a+b)
				),
			)
			where
				brackets = _brackets_for_type(branch.type),
				inlineable = 
					not sub_values_are_multiline
					and (
						total_sub_value_length < assumed_console_width 
						or theoretical_line_length < assumed_console_width
					)
			where
				theoretical_line_length = total_sub_value_length + indent_amount*branch.depth + if(branch.key, size(branch.key) + 2, 0)
			where
				total_sub_value_length = fold(map(sub_values, value.chars), a + b + if(sub_values_are_trivial, 1, 2)) //1 and 2 are the length ','/', ', which we use to join lists of things.
			where
				sub_values_are_multiline = bool(find(sub_values, value.newlines)),
				sub_values_are_trivial = not find(sub_values, value.chars > 10 or ' ' in split(value.text, ''))
			where
				sub_values = map(branch.items, _serialize(
					{depth:int, key:any, repr:string, type:string}|{depth:int, key:any, items:[any], type:string}<-value, 
					force_single_line
				)),
				key_value = if(branch.key is null, null, _serialize(
					{depth:int, key:any, repr:string, type:string}|{depth:int, key:any, items:[any], type:string}<-branch.key, 
					force_single_line
				))
		),
		
		def({depth:int, key:any, repr:string, type:string} leaf, bool force_single_line=false) -> {text:string, newlines:int, chars:int} ({ //def(ObjectLeaf leaf, …) -> SerializedData
			text: 
				if(key_value,
					key_value.text + ': ' + leaf.repr,
					leaf.repr
				),
			newlines: 0,
			chars: size(leaf.repr),
		} where
			key_value = if(leaf.key is null, null, _serialize(
				{depth:int, key:any, repr:string, type:string}|{depth:int, key:any, items:[any], type:string}<-leaf.key, 
				force_single_line
			))
		)
	)",
	
	//serialize_complete: "",
	
	/* Add to above if line-trimming becomes needed.
	if(size(item_line) <= 80, 
		item_line, 
		item_line[0:79]+'…'
	) where item_line = 'foo'
	*/
	
	_single_value_to_string: "def(any value) -> string
		if(value is string, q(')+value+q('), str(value))",
	
	_brackets_for_type: "def(string valtype) -> null|[string, string]
		switch(valtype,
			'list', ['[',']'],
			'map', ['{','}'],
			null
		)",
	
}

//[1,[2,3],[4,5,6], [[7,8,9],[7,8,me],[7,8,9]], {9:10, 11:[12,13], 14:{15:16}}]
//lib.debug._serialize_aot_item({'indent': 0,'key': 1,'type': '{[int] -> [int]}','value': [{'indent': 1,'key': 2,'type': 'int','value': {'indent': 2,'key': null,'type': 'int','value': 3}}]})